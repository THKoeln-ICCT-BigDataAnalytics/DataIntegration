id,type,parent_id,schema,name,parent_name,datatype,description,constraints,instances,text_sequence,instance_sequence,dataframe
entity_0,schema,,imdb,imdb,,,,,,,,
entity_1,table,entity_0,imdb,name_basics,,,"name.basics.tsv.gz
nconst (string) - alphanumeric unique identifier of the name/person
primaryName (string)â€“ name by which the person is most often credited
birthYear â€“ in YYYY format
deathYear â€“ in YYYY format if applicable, else '\N'
primaryProfession (array of strings)â€“ the top-3 professions of the person
knownForTitles (array of tconsts) â€“ titles the person is known for",,"nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles","name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]","name_basics: {nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles}",0
entity_2,column,entity_1,imdb,nconst,name_basics,string,nconst (string) - alphanumeric unique identifier of the name/person,primary key,"nm0000004, nm0000005, nm0000006, nm0000007, nm0000008",nconst name_basics string primary key,"nconst: {nm0000004, nm0000005, nm0000006, nm0000007, nm0000008}",
entity_3,column,entity_1,imdb,primaryName,name_basics,string,primaryName (string)â€“ name by which the person is most often credited,,"John Belushi, Ingmar Bergman, Ingrid Bergman, Humphrey Bogart, Marlon Brando",primaryName name_basics string ,"primaryName: {John Belushi, Ingmar Bergman, Ingrid Bergman, Humphrey Bogart, Marlon Brando}",
entity_4,column,entity_1,imdb,birthYear,name_basics,yyyy,birthYear â€“ in YYYY format,,"1949, 1918, 1915, 1899, 1924",birthYear name_basics yyyy ,"birthYear: {1949, 1918, 1915, 1899, 1924}",
entity_5,column,entity_1,imdb,deathYear,name_basics,yyyy,"deathYear â€“ in YYYY format if applicable, else '\N'",,"1982, 2007, 1982, 1957, 2004",deathYear name_basics yyyy ,"deathYear: {1982, 2007, 1982, 1957, 2004}",
entity_6,column,entity_1,imdb,primaryProfession,name_basics,array of strings,primaryProfession (array of strings)â€“ the top-3 professions of the person,,"actor,writer,music_department, writer,director,actor, actress,producer,soundtrack, actor,producer,miscellaneous, actor,director,writer",primaryProfession name_basics array of strings ,"primaryProfession: {actor,writer,music_department, writer,director,actor, actress,producer,soundtrack, actor,producer,miscellaneous, actor,director,writer}",
entity_7,column,entity_1,imdb,knownForTitles,name_basics,array of tconsts,knownForTitles (array of tconsts) â€“ titles the person is known for,,"tt0072562,tt0077975,tt0080455,tt0078723, tt0050986,tt0069467,tt0050976,tt0083922, tt0034583,tt0038109,tt0036855,tt0038787, tt0034583,tt0043265,tt0033870,tt0037382, tt0078788,tt0068646,tt0047296,tt0070849",knownForTitles name_basics array of tconsts ,"knownForTitles: {tt0072562,tt0077975,tt0080455,tt0078723, tt0050986,tt0069467,tt0050976,tt0083922, tt0034583,tt0038109,tt0036855,tt0038787, tt0034583,tt0043265,tt0033870,tt0037382, tt0078788,tt0068646,tt0047296,tt0070849}",
entity_8,table,entity_0,imdb,title_akas,,,"title.akas.tsv.gz
titleId (string) - a tconst, an alphanumeric unique identifier of the title
ordering (integer) â€“ a number to uniquely identify rows for a given titleId
title (string) â€“ the localized title
region (string) - the region for this version of the title
language (string) - the language of the title
types (array) - Enumerated set of attributes for this alternative title. One or more of the following: ""alternative"", ""dvd"", ""festival"", ""tv"", ""video"", ""working"", ""original"", ""imdbDisplay"".
attributes (array) - Additional terms to describe this alternative title, not enumerated
isOriginalTitle (boolean) â€“ 0: not original title; 1: original title",,"titleId, ordering, title, region, language, types, attributes, isOriginalTitle","title_akas [titleId, ordering, title, region, language, types, attributes, isOriginalTitle]","title_akas: {titleId, ordering, title, region, language, types, attributes, isOriginalTitle}",1
entity_9,column,entity_8,imdb,titleId,title_akas,string,"titleId (string) - a tconst, an alphanumeric unique identifier of the title",primary key,"tt0000001, tt0000001, tt0000001, tt0000001, tt0000001",titleId title_akas string primary key,"titleId: {tt0000001, tt0000001, tt0000001, tt0000001, tt0000001}",
entity_10,column,entity_8,imdb,ordering,title_akas,integer,ordering (integer) â€“ a number to uniquely identify rows for a given titleId,unique,"4.0, 5.0, 6.0, 7.0, 8.0",ordering title_akas integer unique,"ordering: {4.0, 5.0, 6.0, 7.0, 8.0}",
entity_11,column,entity_8,imdb,title,title_akas,string,title (string) â€“ the localized title,,"Carmencita - spanyol tÃ¡nc, ÎšÎ±ÏÎ¼ÎµÎ½ÏƒÎ¯Ï„Î±, ÐšÐ°Ñ€Ð¼ÐµÐ½ÑÐ¸Ñ‚Ð°, ÐšÐ°Ñ€Ð¼ÐµÐ½ÑÑ–Ñ‚Ð°, ã‚«ãƒ«ãƒ¡ãƒ³ãƒãƒ¼ã‚¿",title title_akas string ,"title: {Carmencita - spanyol tÃ¡nc, ÎšÎ±ÏÎ¼ÎµÎ½ÏƒÎ¯Ï„Î±, ÐšÐ°Ñ€Ð¼ÐµÐ½ÑÐ¸Ñ‚Ð°, ÐšÐ°Ñ€Ð¼ÐµÐ½ÑÑ–Ñ‚Ð°, ã‚«ãƒ«ãƒ¡ãƒ³ãƒãƒ¼ã‚¿}",
entity_12,column,entity_8,imdb,region,title_akas,string,region (string) - the region for this version of the title,,"HU, GR, RU, UA, JP",region title_akas string ,"region: {HU, GR, RU, UA, JP}",
entity_13,column,entity_8,imdb,language,title_akas,string,language (string) - the language of the title,,"\N, \N, \N, \N, ja",language title_akas string ,"language: {\N, \N, \N, \N, ja}",
entity_14,column,entity_8,imdb,types,title_akas,"array enum ""alternative"", ""dvd"", ""festival"", ""tv"", ""video"", ""working"", ""original"", ""imdbDisplay""","types (array) - Enumerated set of attributes for this alternative title. One or more of the following: ""alternative"", ""dvd"", ""festival"", ""tv"", ""video"", ""working"", ""original"", ""imdbDisplay"". ",,"imdbDisplay, imdbDisplay, imdbDisplay, imdbDisplay, imdbDisplay","types title_akas array enum ""alternative"", ""dvd"", ""festival"", ""tv"", ""video"", ""working"", ""original"", ""imdbDisplay"" ","types: {imdbDisplay, imdbDisplay, imdbDisplay, imdbDisplay, imdbDisplay}",
entity_15,column,entity_8,imdb,attributes,title_akas,array,"attributes (array) - Additional terms to describe this alternative title, not enumerated",,"\N, \N, \N, \N, \N",attributes title_akas array ,"attributes: {\N, \N, \N, \N, \N}",
entity_16,column,entity_8,imdb,isOriginalTitle,title_akas,boolean,isOriginalTitle (boolean) â€“ 0: not original title; 1: original title,,"0.0, 0.0, 0.0, 0.0, 0.0",isOriginalTitle title_akas boolean ,"isOriginalTitle: {0.0, 0.0, 0.0, 0.0, 0.0}",
entity_17,table,entity_0,imdb,title_basics,,,"title.basics.tsv.gz
tconst (string) - alphanumeric unique identifier of the title
titleType (string) â€“ the type/format of the title (e.g. movie, short, tvseries, tvepisode, video, etc)
primaryTitle (string) â€“ the more popular title / the title used by the filmmakers on promotional materials at the point of release
originalTitle (string) - original title, in the original language
isAdult (boolean) - 0: non-adult title; 1: adult title
startYear (YYYY) â€“ represents the release year of a title. In the case of TV Series, it is the series start year
endYear (YYYY) â€“ TV Series end year. '\N' for all other title types
runtimeMinutes â€“ primary runtime of the title, in minutes
genres (string array) â€“ includes up to three genres associated with the title",,"tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres","title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]","title_basics: {tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres}",2
entity_18,column,entity_17,imdb,tconst,title_basics,string,tconst (string) - alphanumeric unique identifier of the title,primary key,"tt0000004, tt0000005, tt0000006, tt0000007, tt0000008",tconst title_basics string primary key,"tconst: {tt0000004, tt0000005, tt0000006, tt0000007, tt0000008}",
entity_19,column,entity_17,imdb,titleType,title_basics,string,"titleType (string) â€“ the type/format of the title (e.g. movie, short, tvseries, tvepisode, video, etc)",,"short, short, short, short, short",titleType title_basics string ,"titleType: {short, short, short, short, short}",
entity_20,column,entity_17,imdb,primaryTitle,title_basics,string,primaryTitle (string) â€“ the more popular title / the title used by the filmmakers on promotional materials at the point of release,,"Un bon bock, Blacksmith Scene, Chinese Opium Den, Corbett and Courtney Before the Kinetograph, Edison Kinetoscopic Record of a Sneeze",primaryTitle title_basics string ,"primaryTitle: {Un bon bock, Blacksmith Scene, Chinese Opium Den, Corbett and Courtney Before the Kinetograph, Edison Kinetoscopic Record of a Sneeze}",
entity_21,column,entity_17,imdb,originalTitle,title_basics,string,"originalTitle (string) - original title, in the original language",,"Un bon bock, Blacksmith Scene, Chinese Opium Den, Corbett and Courtney Before the Kinetograph, Edison Kinetoscopic Record of a Sneeze",originalTitle title_basics string ,"originalTitle: {Un bon bock, Blacksmith Scene, Chinese Opium Den, Corbett and Courtney Before the Kinetograph, Edison Kinetoscopic Record of a Sneeze}",
entity_22,column,entity_17,imdb,isAdult,title_basics,boolean,isAdult (boolean) - 0: non-adult title; 1: adult title,,"0, 0, 0, 0, 0",isAdult title_basics boolean ,"isAdult: {0, 0, 0, 0, 0}",
entity_23,column,entity_17,imdb,startYear,title_basics,yyyy,"startYear (YYYY) â€“ represents the release year of a title. In the case of TV Series, it is the series start year",,"1892, 1893, 1894, 1894, 1894",startYear title_basics yyyy ,"startYear: {1892, 1893, 1894, 1894, 1894}",
entity_24,column,entity_17,imdb,endYear,title_basics,yyyy,endYear (YYYY) â€“ TV Series end year. '\N' for all other title types,,"\N, \N, \N, \N, \N",endYear title_basics yyyy ,"endYear: {\N, \N, \N, \N, \N}",
entity_25,column,entity_17,imdb,runtimeMinutes,title_basics,int,"runtimeMinutes â€“ primary runtime of the title, in minutes",,"12, 1, 1, 1, 1",runtimeMinutes title_basics int ,"runtimeMinutes: {12, 1, 1, 1, 1}",
entity_26,column,entity_17,imdb,genres,title_basics,string array,genres (string array) â€“ includes up to three genres associated with the title,,"Animation,Short, Short, Short, Short,Sport, Documentary,Short",genres title_basics string array ,"genres: {Animation,Short, Short, Short, Short,Sport, Documentary,Short}",
entity_27,table,entity_0,imdb,title_crew,,,"title.crew.tsv.gz
tconst (string) - alphanumeric unique identifier of the title
directors (array of nconsts) - director(s) of the given title
writers (array of nconsts) â€“ writer(s) of the given title",,"tconst, directors, writers","title_crew [tconst, directors, writers]","title_crew: {tconst, directors, writers}",3
entity_28,column,entity_27,imdb,tconst,title_crew,string,tconst (string) - alphanumeric unique identifier of the title,primary key,"tt0000004, tt0000005, tt0000006, tt0000007, tt0000008",tconst title_crew string primary key,"tconst: {tt0000004, tt0000005, tt0000006, tt0000007, tt0000008}",
entity_29,column,entity_27,imdb,directors,title_crew,array of nconsts,directors (array of nconsts) - director(s) of the given title,foreign key,"nm0721526, nm0005690, nm0005690, nm0005690,nm0374658, nm0005690",directors title_crew array of nconsts foreign key,"directors: {nm0721526, nm0005690, nm0005690, nm0005690,nm0374658, nm0005690}",
entity_30,column,entity_27,imdb,writers,title_crew,array of nconsts,writers (array of nconsts) â€“ writer(s) of the given title,foreign key,"\N, \N, \N, \N, \N",writers title_crew array of nconsts foreign key,"writers: {\N, \N, \N, \N, \N}",
entity_31,table,entity_0,imdb,title_episode,,,"title.episode.tsv.gz
tconst (string) - alphanumeric identifier of episode
parentTconst (string) - alphanumeric identifier of the parent TV Series
seasonNumber (integer) â€“ season number the episode belongs to
episodeNumber (integer) â€“ episode number of the tconst in the TV series",,"tconst, parentTconst, seasonNumber, episodeNumber","title_episode [tconst, parentTconst, seasonNumber, episodeNumber]","title_episode: {tconst, parentTconst, seasonNumber, episodeNumber}",4
entity_32,column,entity_31,imdb,tconst,title_episode,string,tconst (string) - alphanumeric identifier of episode,primary key,"tt0042889, tt0043426, tt0043631, tt0043693, tt0043710",tconst title_episode string primary key,"tconst: {tt0042889, tt0043426, tt0043631, tt0043693, tt0043710}",
entity_33,column,entity_31,imdb,parentTconst,title_episode,string,parentTconst (string) - alphanumeric identifier of the parent TV Series,foreign key,"tt0989125, tt0040051, tt0989125, tt0989125, tt0989125",parentTconst title_episode string foreign key,"parentTconst: {tt0989125, tt0040051, tt0989125, tt0989125, tt0989125}",
entity_34,column,entity_31,imdb,seasonNumber,title_episode,integer,seasonNumber (integer) â€“ season number the episode belongs to,,"\N, 3, 2, 2, 3",seasonNumber title_episode integer ,"seasonNumber: {\N, 3, 2, 2, 3}",
entity_35,column,entity_31,imdb,episodeNumber,title_episode,integer,episodeNumber (integer) â€“ episode number of the tconst in the TV series,,"\N, 42, 16, 8, 3",episodeNumber title_episode integer ,"episodeNumber: {\N, 42, 16, 8, 3}",
entity_36,table,entity_0,imdb,title_principals,,,"title.principals.tsv.gz
tconst (string) - alphanumeric unique identifier of the title
ordering (integer) â€“ a number to uniquely identify rows for a given titleId
nconst (string) - alphanumeric unique identifier of the name/person
category (string) - the category of job that person was in
job (string) - the specific job title if applicable, else '\N'
characters (string) - the name of the character played if applicable, else '\N'",,"tconst, ordering, nconst, category, job, characters","title_principals [tconst, ordering, nconst, category, job, characters]","title_principals: {tconst, ordering, nconst, category, job, characters}",5
entity_37,column,entity_36,imdb,tconst,title_principals,string,tconst (string) - alphanumeric unique identifier of the title,primary key,"tt0000001, tt0000002, tt0000002, tt0000003, tt0000003",tconst title_principals string primary key,"tconst: {tt0000001, tt0000002, tt0000002, tt0000003, tt0000003}",
entity_38,column,entity_36,imdb,ordering,title_principals,integer,ordering (integer) â€“ a number to uniquely identify rows for a given titleId,unique,"4, 1, 2, 1, 2",ordering title_principals integer unique,"ordering: {4, 1, 2, 1, 2}",
entity_39,column,entity_36,imdb,nconst,title_principals,string,nconst (string) - alphanumeric unique identifier of the name/person,foreign key,"nm0374658, nm0721526, nm1335271, nm0721526, nm0721526",nconst title_principals string foreign key,"nconst: {nm0374658, nm0721526, nm1335271, nm0721526, nm0721526}",
entity_40,column,entity_36,imdb,category,title_principals,stringt,category (string) - the category of job that person was in,,"cinematographer, director, composer, director, writer",category title_principals stringt ,"category: {cinematographer, director, composer, director, writer}",
entity_41,column,entity_36,imdb,job,title_principals,stringt,"job (string) - the specific job title if applicable, else '\N'",,"director of photography, \N, \N, \N, \N",job title_principals stringt ,"job: {director of photography, \N, \N, \N, \N}",
entity_42,column,entity_36,imdb,characters,title_principals,string,"characters (string) - the name of the character played if applicable, else '\N'",,"\N, \N, \N, \N, \N",characters title_principals string ,"characters: {\N, \N, \N, \N, \N}",
entity_43,table,entity_0,imdb,title_ratings,,,"title.ratings.tsv.gz
tconst (string) - alphanumeric unique identifier of the title
averageRating â€“ weighted average of all the individual user ratings
numVotes - number of votes the title has received",,"tconst, averageRating, numVotes","title_ratings [tconst, averageRating, numVotes]","title_ratings: {tconst, averageRating, numVotes}",6
entity_44,column,entity_43,imdb,tconst,title_ratings,object,tconst (string) - alphanumeric unique identifier of the title,primary key,"tt0000004, tt0000005, tt0000006, tt0000007, tt0000008",tconst title_ratings object primary key,"tconst: {tt0000004, tt0000005, tt0000006, tt0000007, tt0000008}",
entity_45,column,entity_43,imdb,averageRating,title_ratings,float,averageRating â€“ weighted average of all the individual user ratings,,"5.2, 6.2, 5.0, 5.3, 5.4",averageRating title_ratings float ,"averageRating: {5.2, 6.2, 5.0, 5.3, 5.4}",
entity_46,column,entity_43,imdb,numVotes,title_ratings,integer,numVotes - number of votes the title has received,,"192, 2969, 216, 917, 2317",numVotes title_ratings integer ,"numVotes: {192, 2969, 216, 917, 2317}",
entity_47,schema,,sakila,sakila,,,,,,,,
entity_48,table,entity_47,sakila,actor,,,"The actor table lists information for all actors.

The actor table is joined to the film table by means of the film_actor table.

Columns
actor_id: A surrogate primary key used to uniquely identify each actor in the table.

first_name: The actor first name.

last_name: The actor last name.",,"actor_id, first_name, last_name","actor [actor_id, first_name, last_name]","actor: {actor_id, first_name, last_name}",7
entity_49,column,entity_48,sakila,actor_id,actor,smallint unsigned,actor_id: A surrogate primary key used to uniquely identify each actor in the table.,NOT NULL PRIMARY KEY auto_increment,"2, 3, 4, 5, 6",actor_id actor smallint unsigned NOT NULL PRIMARY KEY auto_increment,"actor_id: {2, 3, 4, 5, 6}",
entity_50,column,entity_48,sakila,first_name,actor,varchar(45),first_name: The actor first name.,NOT NULL,"NICK, ED, JENNIFER, JOHNNY, BETTE",first_name actor varchar(45) NOT NULL,"first_name: {NICK, ED, JENNIFER, JOHNNY, BETTE}",
entity_51,column,entity_48,sakila,last_name,actor,varchar(45),last_name: The actor last name.,NOT NULL INDEX,"WAHLBERG, CHASE, DAVIS, LOLLOBRIGIDA, NICHOLSON",last_name actor varchar(45) NOT NULL INDEX,"last_name: {WAHLBERG, CHASE, DAVIS, LOLLOBRIGIDA, NICHOLSON}",
entity_52,table,entity_47,sakila,address,,,"The address table contains address information for customers, staff, and stores.

The address table primary key appears as a foreign key in the customer, staff, and store tables.

Columns
address_id: A surrogate primary key used to uniquely identify each address in the table.

address: The first line of an address.

address2: An optional second line of an address.

district: The region of an address, this may be a state, province, prefecture, etc.

city_id: A foreign key pointing to the city table.

postal_code: The postal code or ZIP code of the address (where applicable).

phone: The telephone number for the address.",,"address_id, address, address2, district, city_id, postal_code, phone","address [address_id, address, address2, district, city_id, postal_code, phone]","address: {address_id, address, address2, district, city_id, postal_code, phone}",8
entity_53,column,entity_52,sakila,address_id,address,smallint unsigned,address_id: A surrogate primary key used to uniquely identify each address in the table.,NOT NULL PRIMARY KEY auto_increment,"18, 604, 605, 5, 6",address_id address smallint unsigned NOT NULL PRIMARY KEY auto_increment,"address_id: {18, 604, 605, 5, 6}",
entity_54,column,entity_52,sakila,address,address,varchar(50),address: The first line of an address.,NOT NULL,"770 Bydgoszcz Avenue, 1331 Usak Boulevard, 1325 Fukuyama Street, 1913 Hanoi Way, 1121 Loja Avenue",address address varchar(50) NOT NULL,"address: {770 Bydgoszcz Avenue, 1331 Usak Boulevard, 1325 Fukuyama Street, 1913 Hanoi Way, 1121 Loja Avenue}",
entity_55,column,entity_52,sakila,address2,address,varchar(50),address2: An optional second line of an address.,,"nan, nan, nan, nan, nan",address2 address varchar(50) ,"address2: {nan, nan, nan, nan, nan}",
entity_56,column,entity_52,sakila,district,address,varchar(20),"district: The region of an address, this may be a state, province, prefecture, etc.",NOT NULL,"California, Vaud, Heilongjiang, Nagasaki, California",district address varchar(20) NOT NULL,"district: {California, Vaud, Heilongjiang, Nagasaki, California}",
entity_57,column,entity_52,sakila,city_id,address,smallint unsigned,city_id: A foreign key pointing to the city table.,NOT NULL INDEX FOREIGN KEY REFERENCES city(city_id),"120, 296, 537, 463, 449",city_id address smallint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES city(city_id),"city_id: {120, 296, 537, 463, 449}",
entity_58,column,entity_52,sakila,postal_code,address,varchar(10),postal_code: The postal code or ZIP code of the address (where applicable).,,"16266, 61960, 27107, 35200, 17886",postal_code address varchar(10) ,"postal_code: {16266, 61960, 27107, 35200, 17886}",
entity_59,column,entity_52,sakila,phone,address,varchar(20),phone: The telephone number for the address.,NOT NULL,"517338314235, 145308717464, 288241215394, 28303384290, 838635286649",phone address varchar(20) NOT NULL,"phone: {517338314235, 145308717464, 288241215394, 28303384290, 838635286649}",
entity_60,table,entity_47,sakila,category,,,"The category table lists the categories that can be assigned to a film.

The category table is joined to the film table by means of the film_category table.

Columns
category_id: A surrogate primary key used to uniquely identify each category in the table.

name: The name of the category.",,"category_id, name","category [category_id, name]","category: {category_id, name}",9
entity_61,column,entity_60,sakila,category_id,category,tinyint unsigned,category_id: A surrogate primary key used to uniquely identify each category in the table.,NOT NULL PRIMARY KEY auto_increment,"2, 3, 4, 5, 6",category_id category tinyint unsigned NOT NULL PRIMARY KEY auto_increment,"category_id: {2, 3, 4, 5, 6}",
entity_62,column,entity_60,sakila,name,category,varchar(25),name: The name of the category.,NOT NULL,"Animation, Children, Classics, Comedy, Documentary",name category varchar(25) NOT NULL,"name: {Animation, Children, Classics, Comedy, Documentary}",
entity_63,table,entity_47,sakila,city,,,"The city table contains a list of cities.

The city table is referred to by a foreign key in the address table and refers to the country table using a foreign key.

Columns
city_id: A surrogate primary key used to uniquely identify each city in the table.

city: The name of the city.

country_id: A foreign key identifying the country that the city belongs to.",,"city_id, city, country_id","city [city_id, city, country_id]","city: {city_id, city, country_id}",10
entity_64,column,entity_63,sakila,city_id,city,smallint unsigned,city_id: A surrogate primary key used to uniquely identify each city in the table.,NOT NULL PRIMARY KEY auto_increment,"2, 3, 4, 5, 6",city_id city smallint unsigned NOT NULL PRIMARY KEY auto_increment,"city_id: {2, 3, 4, 5, 6}",
entity_65,column,entity_63,sakila,city,city,varchar(50),city: The name of the city.,NOT NULL,"Abha, Abu Dhabi, AcuÃ±a, Adana, Addis Abeba",city city varchar(50) NOT NULL,"city: {Abha, Abu Dhabi, AcuÃ±a, Adana, Addis Abeba}",
entity_66,column,entity_63,sakila,country_id,city,smallint unsigned,country_id: A foreign key identifying the country that the city belongs to.,NOT NULL INDEX FOREIGN KEY REFERENCES country(country_id),"82, 101, 60, 97, 31",country_id city smallint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES country(country_id),"country_id: {82, 101, 60, 97, 31}",
entity_67,table,entity_47,sakila,country,,,"The country table contains a list of countries.

The country table is referred to by a foreign key in the city table.

Columns
country_id: A surrogate primary key used to uniquely identify each country in the table.

country: The name of the country.
",,"country_id, country","country [country_id, country]","country: {country_id, country}",11
entity_68,column,entity_67,sakila,country_id,country,smallint unsigned,country_id: A surrogate primary key used to uniquely identify each country in the table.,NOT NULL PRIMARY KEY auto_increment,"2, 3, 4, 5, 6",country_id country smallint unsigned NOT NULL PRIMARY KEY auto_increment,"country_id: {2, 3, 4, 5, 6}",
entity_69,column,entity_67,sakila,country,country,varchar(50),country: The name of the country.,NOT NULL,"Algeria, American Samoa, Angola, Anguilla, Argentina",country country varchar(50) NOT NULL,"country: {Algeria, American Samoa, Angola, Anguilla, Argentina}",
entity_70,table,entity_47,sakila,customer,,,"The customer table contains a list of all customers.

The customer table is referred to in the payment and rental tables and refers to the address and store tables using foreign keys.

Columns
customer_id: A surrogate primary key used to uniquely identify each customer in the table.

store_id: A foreign key identifying the customer “home store.” Customers are not limited to renting only from this store, but this is the store at which they generally shop.

first_name: The customer first name.

last_name: The customer last name.

email: The customer email address.

address_id: A foreign key identifying the customer address in the address table.

active: Indicates whether the customer is an active customer. Setting this to FALSE serves as an alternative to deleting a customer outright. Most queries should have a WHERE active = TRUE clause.

create_date: The date the customer was added to the system. This date is automatically set using a trigger during an INSERT.",,"customer_id, store_id, first_name, last_name, email, address_id, active, create_date","customer [customer_id, store_id, first_name, last_name, email, address_id, active, create_date]","customer: {customer_id, store_id, first_name, last_name, email, address_id, active, create_date}",12
entity_71,column,entity_70,sakila,customer_id,customer,smallint unsigned,customer_id: A surrogate primary key used to uniquely identify each customer in the table.,NOT NULL PRIMARY KEY auto_increment,"2, 3, 4, 5, 6",customer_id customer smallint unsigned NOT NULL PRIMARY KEY auto_increment,"customer_id: {2, 3, 4, 5, 6}",
entity_72,column,entity_70,sakila,store_id,customer,tinyint unsigned,"store_id: A foreign key identifying the customer “home store.” Customers are not limited to renting only from this store, but this is the store at which they generally shop.",NOT NULL INDEX FOREIGN KEY REFERENCES store(store_id),"1, 1, 2, 1, 2",store_id customer tinyint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES store(store_id),"store_id: {1, 1, 2, 1, 2}",
entity_73,column,entity_70,sakila,first_name,customer,varchar(45),first_name: The customer first name.,NOT NULL,"PATRICIA, LINDA, BARBARA, ELIZABETH, JENNIFER",first_name customer varchar(45) NOT NULL,"first_name: {PATRICIA, LINDA, BARBARA, ELIZABETH, JENNIFER}",
entity_74,column,entity_70,sakila,last_name,customer,varchar(45),last_name: The customer last name.,NOT NULL INDEX,"JOHNSON, WILLIAMS, JONES, BROWN, DAVIS",last_name customer varchar(45) NOT NULL INDEX,"last_name: {JOHNSON, WILLIAMS, JONES, BROWN, DAVIS}",
entity_75,column,entity_70,sakila,email,customer,varchar(50),email: The customer email address.,,"PATRICIA.JOHNSON@sakilacustomer.org, LINDA.WILLIAMS@sakilacustomer.org, BARBARA.JONES@sakilacustomer.org, ELIZABETH.BROWN@sakilacustomer.org, JENNIFER.DAVIS@sakilacustomer.org",email customer varchar(50) ,"email: {PATRICIA.JOHNSON@sakilacustomer.org, LINDA.WILLIAMS@sakilacustomer.org, BARBARA.JONES@sakilacustomer.org, ELIZABETH.BROWN@sakilacustomer.org, JENNIFER.DAVIS@sakilacustomer.org}",
entity_76,column,entity_70,sakila,address_id,customer,smallint unsigned,address_id: A foreign key identifying the customer address in the address table.,NOT NULL INDEX FOREIGN KEY REFERENCES address(address_id),"6, 7, 8, 9, 10",address_id customer smallint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES address(address_id),"address_id: {6, 7, 8, 9, 10}",
entity_77,column,entity_70,sakila,active,customer,tinyint(1),active: Indicates whether the customer is an active customer. Setting this to FALSE serves as an alternative to deleting a customer outright. Most queries should have a WHERE active = TRUE clause.,NOT NULL,"1, 1, 1, 1, 1",active customer tinyint(1) NOT NULL,"active: {1, 1, 1, 1, 1}",
entity_78,column,entity_70,sakila,create_date,customer,datetime,create_date: The date the customer was added to the system. This date is automatically set using a trigger during an INSERT.,NOT NULL,"2006-02-14 22:04:36, 2006-02-14 22:04:36, 2006-02-14 22:04:36, 2006-02-14 22:04:36, 2006-02-14 22:04:36",create_date customer datetime NOT NULL,"create_date: {2006-02-14 22:04:36, 2006-02-14 22:04:36, 2006-02-14 22:04:36, 2006-02-14 22:04:36, 2006-02-14 22:04:36}",
entity_79,table,entity_47,sakila,film,,,"The film table is a list of all films potentially in stock in the stores. The actual in-stock copies of each film are represented in the inventory table.

The film table refers to the language table and is referred to by the film_category, film_actor, and inventory tables.

Columns
film_id: A surrogate primary key used to uniquely identify each film in the table.

title: The title of the film.

description: A short description or plot summary of the film.

release_year: The year in which the movie was released.

language_id: A foreign key pointing at the language table; identifies the language of the film.

original_language_id: A foreign key pointing at the language table; identifies the original language of the film. Used when a film has been dubbed into a new language.

rental_duration: The length of the rental period, in days.

rental_rate: The cost to rent the film for the period specified in the rental_duration column.

length: The duration of the film, in minutes.

replacement_cost: The amount charged to the customer if the film is not returned or is returned in a damaged state.

rating: The rating assigned to the film. Can be one of: G, PG, PG-13, R, or NC-17.

special_features: Lists which common special features are included on the DVD. Can be zero or more of: Trailers, Commentaries, Deleted Scenes, Behind the Scenes.",,"film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features","film [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features]","film: {film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features}",13
entity_80,column,entity_79,sakila,film_id,film,smallint unsigned,film_id: A surrogate primary key used to uniquely identify each film in the table.,NOT NULL PRIMARY KEY auto_increment,"2, 3, 4, 5, 6",film_id film smallint unsigned NOT NULL PRIMARY KEY auto_increment,"film_id: {2, 3, 4, 5, 6}",
entity_81,column,entity_79,sakila,title,film,varchar(128),title: The title of the film.,NOT NULL INDEX,"ACE GOLDFINGER, ADAPTATION HOLES, AFFAIR PREJUDICE, AFRICAN EGG, AGENT TRUMAN",title film varchar(128) NOT NULL INDEX,"title: {ACE GOLDFINGER, ADAPTATION HOLES, AFFAIR PREJUDICE, AFRICAN EGG, AGENT TRUMAN}",
entity_82,column,entity_79,sakila,description,film,text,description: A short description or plot summary of the film.,,"A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, A Fanciful Documentary of a Frisbee And a Lumberjack who must Chase a Monkey in A Shark Tank, A Fast-Paced Documentary of a Pastry Chef And a Dentist who must Pursue a Forensic Psychologist in The Gulf of Mexico, A Intrepid Panorama of a Robot And a Boy who must Escape a Sumo Wrestler in Ancient China",description film text ,"description: {A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, A Fanciful Documentary of a Frisbee And a Lumberjack who must Chase a Monkey in A Shark Tank, A Fast-Paced Documentary of a Pastry Chef And a Dentist who must Pursue a Forensic Psychologist in The Gulf of Mexico, A Intrepid Panorama of a Robot And a Boy who must Escape a Sumo Wrestler in Ancient China}",
entity_83,column,entity_79,sakila,release_year,film,year,release_year: The year in which the movie was released.,,"2006, 2006, 2006, 2006, 2006",release_year film year ,"release_year: {2006, 2006, 2006, 2006, 2006}",
entity_84,column,entity_79,sakila,language_id,film,tinyint unsigned,language_id: A foreign key pointing at the language table; identifies the language of the film.,NOT NULL INDEX FOREIGN KEY REFERENCES language(language_id),"1, 1, 1, 1, 1",language_id film tinyint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES language(language_id),"language_id: {1, 1, 1, 1, 1}",
entity_85,column,entity_79,sakila,original_language_id,film,tinyint unsigned,original_language_id: A foreign key pointing at the language table; identifies the original language of the film. Used when a film has been dubbed into a new language.,NULL INDEX FOREIGN KEY REFERENCES language(language_id),"nan, nan, nan, nan, nan",original_language_id film tinyint unsigned NULL INDEX FOREIGN KEY REFERENCES language(language_id),"original_language_id: {nan, nan, nan, nan, nan}",
entity_86,column,entity_79,sakila,rental_duration,film,tinyint unsigned,"rental_duration: The length of the rental period, in days.",NOT NULL,"3, 7, 5, 6, 3",rental_duration film tinyint unsigned NOT NULL,"rental_duration: {3, 7, 5, 6, 3}",
entity_87,column,entity_79,sakila,rental_rate,film,"decimal(4,2)",rental_rate: The cost to rent the film for the period specified in the rental_duration column.,NOT NULL,"4.99, 2.99, 2.99, 2.99, 2.99","rental_rate film decimal(4,2) NOT NULL","rental_rate: {4.99, 2.99, 2.99, 2.99, 2.99}",
entity_88,column,entity_79,sakila,length,film,smallint unsigned,"length: The duration of the film, in minutes.",,"48, 50, 117, 130, 169",length film smallint unsigned ,"length: {48, 50, 117, 130, 169}",
entity_89,column,entity_79,sakila,replacement_cost,film,"decimal(5,2)",replacement_cost: The amount charged to the customer if the film is not returned or is returned in a damaged state.,NOT NULL,"12.99, 18.99, 26.99, 22.99, 17.99","replacement_cost film decimal(5,2) NOT NULL","replacement_cost: {12.99, 18.99, 26.99, 22.99, 17.99}",
entity_90,column,entity_79,sakila,rating,film,"enum('G','PG','PG-13','R','NC-17')","rating: The rating assigned to the film. Can be one of: G, PG, PG-13, R, or NC-17.",,"G, NC-17, G, G, PG","rating film enum('G','PG','PG-13','R','NC-17') ","rating: {G, NC-17, G, G, PG}",
entity_91,column,entity_79,sakila,special_features,film,"set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes')","special_features: Lists which common special features are included on the DVD. Can be zero or more of: Trailers, Commentaries, Deleted Scenes, Behind the Scenes.",,"Trailers,Deleted Scenes, Trailers,Deleted Scenes, Commentaries,Behind the Scenes, Deleted Scenes, Deleted Scenes","special_features film set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') ","special_features: {Trailers,Deleted Scenes, Trailers,Deleted Scenes, Commentaries,Behind the Scenes, Deleted Scenes, Deleted Scenes}",
entity_92,table,entity_47,sakila,film_actor,,,"The film_actor table is used to support a many-to-many relationship between films and actors. For each actor in a given film, there will be one row in the film_actor table listing the actor and film.

The film_actor table refers to the film and actor tables using foreign keys.

Columns:
actor_id: A foreign key identifying the actor.

film_id: A foreign key identifying the film.",,"actor_id, film_id","film_actor [actor_id, film_id]","film_actor: {actor_id, film_id}",14
entity_93,column,entity_92,sakila,actor_id,film_actor,smallint unsigned,actor_id: A foreign key identifying the actor.,NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES actor(actor_id),"10, 20, 30, 40, 53",actor_id film_actor smallint unsigned NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES actor(actor_id),"actor_id: {10, 20, 30, 40, 53}",
entity_94,column,entity_92,sakila,film_id,film_actor,smallint unsigned,film_id: A foreign key identifying the film.,NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES film(film_id),"1, 1, 1, 1, 1",film_id film_actor smallint unsigned NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES film(film_id),"film_id: {1, 1, 1, 1, 1}",
entity_95,table,entity_47,sakila,film_category,,,"The film_category table is used to support a many-to-many relationship between films and categories. For each category applied to a film, there will be one row in the film_category table listing the category and film.

The film_category table refers to the film and category tables using foreign keys.

Columns:
film_id: A foreign key identifying the film.

category_id: A foreign key identifying the category.",,"film_id, category_id","film_category [film_id, category_id]","film_category: {film_id, category_id}",15
entity_96,column,entity_95,sakila,film_id,film_category,smallint unsigned,film_id: A foreign key identifying the film.,NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES film(film_id),"21, 29, 38, 56, 67",film_id film_category smallint unsigned NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES film(film_id),"film_id: {21, 29, 38, 56, 67}",
entity_97,column,entity_95,sakila,category_id,film_category,tinyint unsigned,category_id: A foreign key identifying the category.,NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES category(category_id),"1, 1, 1, 1, 1",category_id film_category tinyint unsigned NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES category(category_id),"category_id: {1, 1, 1, 1, 1}",
entity_98,table,entity_47,sakila,inventory,,,"The inventory table contains one row for each copy of a given film in a given store.

The inventory table refers to the film and store tables using foreign keys and is referred to by the rental table.

Columns
inventory_id: A surrogate primary key used to uniquely identify each item in inventory.

film_id: A foreign key pointing to the film this item represents.

store_id: A foreign key pointing to the store stocking this item.",,"inventory_id, film_id, store_id","inventory [inventory_id, film_id, store_id]","inventory: {inventory_id, film_id, store_id}",16
entity_99,column,entity_98,sakila,inventory_id,inventory,mediumint unsigned,inventory_id: A surrogate primary key used to uniquely identify each item in inventory.,NOT NULL PRIMARY KEY auto_increment,"2, 3, 4, 16, 17",inventory_id inventory mediumint unsigned NOT NULL PRIMARY KEY auto_increment,"inventory_id: {2, 3, 4, 16, 17}",
entity_100,column,entity_98,sakila,film_id,inventory,smallint unsigned,film_id: A foreign key pointing to the film this item represents.,NOT NULL INDEX FOREIGN KEY REFERENCES film(film_id),"1, 1, 1, 4, 4",film_id inventory smallint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES film(film_id),"film_id: {1, 1, 1, 4, 4}",
entity_101,column,entity_98,sakila,store_id,inventory,tinyint unsigned,store_id: A foreign key pointing to the store stocking this item.,NOT NULL INDEX FOREIGN KEY REFERENCES store(store_id),"1, 1, 1, 1, 1",store_id inventory tinyint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES store(store_id),"store_id: {1, 1, 1, 1, 1}",
entity_102,table,entity_47,sakila,language,,,"The language table is a lookup table listing the possible languages that films can have for their language and original language values.

The language table is referred to by the film table.

Columns
language_id: A surrogate primary key used to uniquely identify each language.

name: The English name of the language.",,"language_id, name","language [language_id, name]","language: {language_id, name}",17
entity_103,column,entity_102,sakila,language_id,language,tinyint unsigned,language_id: A surrogate primary key used to uniquely identify each language.,NOT NULL PRIMARY KEY auto_increment,"2, 3, 4, 5, 6",language_id language tinyint unsigned NOT NULL PRIMARY KEY auto_increment,"language_id: {2, 3, 4, 5, 6}",
entity_104,column,entity_102,sakila,name,language,char(20),name: The English name of the language.,NOT NULL,"Italian, Japanese, Mandarin, French, German",name language char(20) NOT NULL,"name: {Italian, Japanese, Mandarin, French, German}",
entity_105,table,entity_47,sakila,payment,,,"The payment table records each payment made by a customer, with information such as the amount and the rental being paid for (when applicable).

The payment table refers to the customer, rental, and staff tables.

Columns
payment_id: A surrogate primary key used to uniquely identify each payment.

customer_id: The customer whose balance the payment is being applied to. This is a foreign key reference to the customer table.

staff_id: The staff member who processed the payment. This is a foreign key reference to the staff table.

rental_id: The rental that the payment is being applied to. This is optional because some payments are for outstanding fees and may not be directly related to a rental.

amount: The amount of the payment.

payment_date: The date the payment was processed.",,"payment_id, customer_id, staff_id, rental_id, amount, payment_date","payment [payment_id, customer_id, staff_id, rental_id, amount, payment_date]","payment: {payment_id, customer_id, staff_id, rental_id, amount, payment_date}",18
entity_106,column,entity_105,sakila,payment_id,payment,smallint unsigned,payment_id: A surrogate primary key used to uniquely identify each payment.,NOT NULL PRIMARY KEY auto_increment,"2, 3, 4, 5, 6",payment_id payment smallint unsigned NOT NULL PRIMARY KEY auto_increment,"payment_id: {2, 3, 4, 5, 6}",
entity_107,column,entity_105,sakila,customer_id,payment,smallint unsigned,customer_id: The customer whose balance the payment is being applied to. This is a foreign key reference to the customer table.,NOT NULL INDEX FOREIGN KEY REFERENCES customer(customer_id),"1, 1, 1, 1, 1",customer_id payment smallint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES customer(customer_id),"customer_id: {1, 1, 1, 1, 1}",
entity_108,column,entity_105,sakila,staff_id,payment,tinyint unsigned,staff_id: The staff member who processed the payment. This is a foreign key reference to the staff table.,NOT NULL INDEX FOREIGN KEY REFERENCES staff(staff_id),"1, 1, 2, 2, 1",staff_id payment tinyint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES staff(staff_id),"staff_id: {1, 1, 2, 2, 1}",
entity_109,column,entity_105,sakila,rental_id,payment,int,rental_id: The rental that the payment is being applied to. This is optional because some payments are for outstanding fees and may not be directly related to a rental.,NULL INDEX FOREIGN KEY REFERENCES rental(rental_id),"573, 1185, 1422, 1476, 1725",rental_id payment int NULL INDEX FOREIGN KEY REFERENCES rental(rental_id),"rental_id: {573, 1185, 1422, 1476, 1725}",
entity_110,column,entity_105,sakila,amount,payment,"decimal(5,2)",amount: The amount of the payment.,NOT NULL,"0.99, 5.99, 0.99, 9.99, 4.99","amount payment decimal(5,2) NOT NULL","amount: {0.99, 5.99, 0.99, 9.99, 4.99}",
entity_111,column,entity_105,sakila,payment_date,payment,datetime,payment_date: The date the payment was processed.,NOT NULL,"2005-05-28 10:35:23, 2005-06-15 00:54:12, 2005-06-15 18:02:53, 2005-06-15 21:08:46, 2005-06-16 15:18:57",payment_date payment datetime NOT NULL,"payment_date: {2005-05-28 10:35:23, 2005-06-15 00:54:12, 2005-06-15 18:02:53, 2005-06-15 21:08:46, 2005-06-16 15:18:57}",
entity_112,table,entity_47,sakila,rental,,,"The rental table contains one row for each rental of each inventory item with information about who rented what item, when it was rented, and when it was returned.

The rental table refers to the inventory, customer, and staff tables and is referred to by the payment table.

Columns
rental_id: A surrogate primary key that uniquely identifies the rental.

rental_date: The date and time that the item was rented.

inventory_id: The item being rented.

customer_id: The customer renting the item.

return_date: The date and time the item was returned.

staff_id: The staff member who processed the rental.",,"rental_id, rental_date, inventory_id, customer_id, return_date, staff_id","rental [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id]","rental: {rental_id, rental_date, inventory_id, customer_id, return_date, staff_id}",19
entity_113,column,entity_112,sakila,rental_id,rental,int,rental_id: A surrogate primary key that uniquely identifies the rental.,NOT NULL PRIMARY KEY auto_increment,"2, 3, 4, 5, 6",rental_id rental int NOT NULL PRIMARY KEY auto_increment,"rental_id: {2, 3, 4, 5, 6}",
entity_114,column,entity_112,sakila,rental_date,rental,datetime,rental_date: The date and time that the item was rented.,NOT NULL INDEX,"2005-05-24 22:54:33, 2005-05-24 23:03:39, 2005-05-24 23:04:41, 2005-05-24 23:05:21, 2005-05-24 23:08:07",rental_date rental datetime NOT NULL INDEX,"rental_date: {2005-05-24 22:54:33, 2005-05-24 23:03:39, 2005-05-24 23:04:41, 2005-05-24 23:05:21, 2005-05-24 23:08:07}",
entity_115,column,entity_112,sakila,inventory_id,rental,mediumint unsigned,inventory_id: The item being rented.,NOT NULL INDEX FOREIGN KEY REFERENCES inventory(inventory_id),"1525, 1711, 2452, 2079, 2792",inventory_id rental mediumint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES inventory(inventory_id),"inventory_id: {1525, 1711, 2452, 2079, 2792}",
entity_116,column,entity_112,sakila,customer_id,rental,smallint unsigned,customer_id: The customer renting the item.,NOT NULL INDEX FOREIGN KEY REFERENCES customer(customer_id),"459, 408, 333, 222, 549",customer_id rental smallint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES customer(customer_id),"customer_id: {459, 408, 333, 222, 549}",
entity_117,column,entity_112,sakila,return_date,rental,datetime,return_date: The date and time the item was returned.,,"2005-05-28 19:40:33, 2005-06-01 22:12:39, 2005-06-03 01:43:41, 2005-06-02 04:33:21, 2005-05-27 01:32:07",return_date rental datetime ,"return_date: {2005-05-28 19:40:33, 2005-06-01 22:12:39, 2005-06-03 01:43:41, 2005-06-02 04:33:21, 2005-05-27 01:32:07}",
entity_118,column,entity_112,sakila,staff_id,rental,tinyint unsigned,staff_id: The staff member who processed the rental.,NOT NULL INDEX FOREIGN KEY REFERENCES staff(staff_id),"1, 1, 2, 1, 1",staff_id rental tinyint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES staff(staff_id),"staff_id: {1, 1, 2, 1, 1}",
entity_119,table,entity_47,sakila,staff,,,"The staff table lists all staff members, including information for email address, login information, and picture.

The staff table refers to the store and address tables using foreign keys, and is referred to by the rental, payment, and store tables.

Columns
staff_id: A surrogate primary key that uniquely identifies the staff member.

first_name: The first name of the staff member.

last_name: The last name of the staff member.

address_id: A foreign key to the staff member address in the address table.

picture: A BLOB containing a photograph of the employee.

email: The staff member email address.

store_id: The staff member “home store.” The employee can work at other stores but is generally assigned to the store listed.

active: Whether this is an active employee. If employees leave, their rows are not deleted from this table; instead, this column is set to FALSE.

username: The user name used by the staff member to access the rental system.

password: The password used by the staff member to access the rental system. The password should be stored as a hash using the SHA2() function.
",,"staff_id, first_name, last_name, address_id, email, store_id, active, username, password","staff [staff_id, first_name, last_name, address_id, email, store_id, active, username, password]","staff: {staff_id, first_name, last_name, address_id, email, store_id, active, username, password}",20
entity_120,column,entity_119,sakila,staff_id,staff,tinyint unsigned,staff_id: A surrogate primary key that uniquely identifies the staff member.,NOT NULL PRIMARY KEY auto_increment,2,staff_id staff tinyint unsigned NOT NULL PRIMARY KEY auto_increment,staff_id: {2},
entity_121,column,entity_119,sakila,first_name,staff,varchar(45),first_name: The first name of the staff member.,NOT NULL,Jon,first_name staff varchar(45) NOT NULL,first_name: {Jon},
entity_122,column,entity_119,sakila,last_name,staff,varchar(45),last_name: The last name of the staff member.,NOT NULL,Stephens,last_name staff varchar(45) NOT NULL,last_name: {Stephens},
entity_123,column,entity_119,sakila,address_id,staff,smallint unsigned,address_id: A foreign key to the staff member address in the address table.,NOT NULL INDEX FOREIGN KEY REFERENCES address(address_id),4,address_id staff smallint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES address(address_id),address_id: {4},
entity_124,column,entity_119,sakila,email,staff,varchar(50),email: The staff member email address.,,Jon.Stephens@sakilastaff.com,email staff varchar(50) ,email: {Jon.Stephens@sakilastaff.com},
entity_125,column,entity_119,sakila,store_id,staff,tinyint unsigned,store_id: The staff member “home store.” The employee can work at other stores but is generally assigned to the store listed.,NOT NULL INDEX FOREIGN KEY REFERENCES store(store_id),2,store_id staff tinyint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES store(store_id),store_id: {2},
entity_126,column,entity_119,sakila,active,staff,tinyint(1),"active: Whether this is an active employee. If employees leave, their rows are not deleted from this table; instead, this column is set to FALSE.",NOT NULL,1,active staff tinyint(1) NOT NULL,active: {1},
entity_127,column,entity_119,sakila,username,staff,varchar(16),username: The user name used by the staff member to access the rental system.,NOT NULL,Jon,username staff varchar(16) NOT NULL,username: {Jon},
entity_128,column,entity_119,sakila,password,staff,varchar(40),password: The password used by the staff member to access the rental system. The password should be stored as a hash using the SHA2() function.,,nan,password staff varchar(40) ,password: {nan},
entity_129,table,entity_47,sakila,store,,,"The store table lists all stores in the system. All inventory is assigned to specific stores, and staff and customers are assigned a “home store”.

The store table refers to the staff and address tables using foreign keys and is referred to by the staff, customer, and inventory tables.

Columns
store_id: A surrogate primary key that uniquely identifies the store.

manager_staff_id: A foreign key identifying the manager of this store.

address_id: A foreign key identifying the address of this store.",,"store_id, manager_staff_id, address_id","store [store_id, manager_staff_id, address_id]","store: {store_id, manager_staff_id, address_id}",21
entity_130,column,entity_129,sakila,store_id,store,tinyint unsigned,store_id: A surrogate primary key that uniquely identifies the store.,NOT NULL PRIMARY KEY auto_increment,2,store_id store tinyint unsigned NOT NULL PRIMARY KEY auto_increment,store_id: {2},
entity_131,column,entity_129,sakila,manager_staff_id,store,tinyint unsigned,manager_staff_id: A foreign key identifying the manager of this store.,NOT NULL UNIQUE FOREIGN KEY REFERENCES staff(staff_id),2,manager_staff_id store tinyint unsigned NOT NULL UNIQUE FOREIGN KEY REFERENCES staff(staff_id),manager_staff_id: {2},
entity_132,column,entity_129,sakila,address_id,store,smallint unsigned,address_id: A foreign key identifying the address of this store.,NOT NULL INDEX FOREIGN KEY REFERENCES address(address_id),2,address_id store smallint unsigned NOT NULL INDEX FOREIGN KEY REFERENCES address(address_id),address_id: {2},
entity_133,schema,,movielens,movielens,,,,,,,,
entity_134,table,entity_133,movielens,links,,,"Links Data File Structure (links.csv)
Identifiers that can be used to link to other sources of movie data are contained in the file links.csv. Each line of this file after the header row represents one movie, and has the following format:

movieId,imdbId,tmdbId
movieId is an identifier for movies used by https://movielens.org. E.g., the movie Toy Story has the link https://movielens.org/movies/1.

imdbId is an identifier for movies used by http://www.imdb.com. E.g., the movie Toy Story has the link http://www.imdb.com/title/tt0114709/.

tmdbId is an identifier for movies used by https://www.themoviedb.org. E.g., the movie Toy Story has the link https://www.themoviedb.org/movie/862.",,"movieId, imdbId, tmdbId","links [movieId, imdbId, tmdbId]","links: {movieId, imdbId, tmdbId}",22
entity_135,column,entity_134,movielens,movieId,links,integer,"movieId is an identifier for movies used by https://movielens.org. E.g., the movie Toy Story has the link https://movielens.org/movies/1.",primary key,"1019.0, 5.0, 6.0, 7.0, 8.0",movieId links integer primary key,"movieId: {1019.0, 5.0, 6.0, 7.0, 8.0}",
entity_136,column,entity_134,movielens,imdbId,links,integer,"imdbId is an identifier for movies used by http://www.imdb.com. E.g., the movie Toy Story has the link http://www.imdb.com/title/tt0114709/.",foreign key,"46672.0, 113041.0, 113277.0, 114319.0, 112302.0",imdbId links integer foreign key,"imdbId: {46672.0, 113041.0, 113277.0, 114319.0, 112302.0}",
entity_137,column,entity_134,movielens,tmdbId,links,integer,"tmdbId is an identifier for movies used by https://www.themoviedb.org. E.g., the movie Toy Story has the link https://www.themoviedb.org/movie/862.",foreign key,"173.0, 11862.0, 949.0, 11860.0, 45325.0",tmdbId links integer foreign key,"tmdbId: {173.0, 11862.0, 949.0, 11860.0, 45325.0}",
entity_138,table,entity_133,movielens,movies,,,"Movies Data File Structure (movies.csv)
Movie information is contained in the file movies.csv. Each line of this file after the header row represents one movie, and has the following format:

movieId,title,genres
Movie titles are entered manually or imported from https://www.themoviedb.org/, and include the year of release in parentheses. Errors and inconsistencies may exist in these titles.

Genres are a pipe-separated list, and are selected from the following:  Action Adventure Animation Children's Comedy Crime Documentary Drama Fantasy Film-Noir Horror Musical Mystery Romance Sci-Fi Thriller War Western (no genres listed)",,"movieId, title, genres","movies [movieId, title, genres]","movies: {movieId, title, genres}",23
entity_139,column,entity_138,movielens,movieId,movies,integer,"movieId is an identifier for movies used by https://movielens.org. E.g., the movie Toy Story has the link https://movielens.org/movies/1.",foreign key,"4, 5, 6, 7, 8",movieId movies integer foreign key,"movieId: {4, 5, 6, 7, 8}",
entity_140,column,entity_138,movielens,title,movies,varchar,"Movie titles are entered manually or imported from https://www.themoviedb.org/, and include the year of release in parentheses. Errors and inconsistencies may exist in these titles.",,"Waiting to Exhale (1995), Father of the Bride Part II (1995), Heat (1995), Sabrina (1995), Tom and Huck (1995)",title movies varchar,"title: {Waiting to Exhale (1995), Father of the Bride Part II (1995), Heat (1995), Sabrina (1995), Tom and Huck (1995)}",
entity_141,column,entity_138,movielens,genres,movies,"array enum ""Action"", ""Adventure"",  ""Animation"", ""Children's Comedy"", ""Crime"", ""Documentary"", ""Drama"", ""Fantasy"", ""Film-Noir"", ""Horror"", ""Musical"", ""Mystery"", ""Romance"", ""Sci-Fi"", ""Thriller"", ""War"", ""Western""","Genres are a pipe-separated list, and are selected from the following:  Action Adventure Animation Children's Comedy Crime Documentary Drama Fantasy Film-Noir Horror Musical Mystery Romance Sci-Fi Thriller War Western (no genres listed)",,"Comedy|Drama|Romance, Comedy, Action|Crime|Thriller, Comedy|Romance, Adventure|Children","genres movies array enum ""Action"", ""Adventure"",  ""Animation"", ""Children's Comedy"", ""Crime"", ""Documentary"", ""Drama"", ""Fantasy"", ""Film-Noir"", ""Horror"", ""Musical"", ""Mystery"", ""Romance"", ""Sci-Fi"", ""Thriller"", ""War"", ""Western""","genres: {Comedy|Drama|Romance, Comedy, Action|Crime|Thriller, Comedy|Romance, Adventure|Children}",
entity_142,table,entity_133,movielens,ratings,,,"Ratings Data File Structure (ratings.csv)
All ratings are contained in the file ratings.csv. Each line of this file after the header row represents one rating of one movie by one user, and has the following format:

userId,movieId,rating,timestamp
The lines within this file are ordered first by userId, then, within user, by movieId.

Ratings are made on a 5-star scale, with half-star increments (0.5 stars - 5.0 stars).

Timestamps represent seconds since midnight Coordinated Universal Time (UTC) of January 1, 1970.",,"userId, movieId, rating, timestamp","ratings [userId, movieId, rating, timestamp]","ratings: {userId, movieId, rating, timestamp}",24
entity_143,column,entity_142,movielens,userId,ratings,integer,Each line of this file after the header row represents one rating of one movie by one user,primary key,"1.0, 1.0, 1.0, 1.0, 1.0",userId ratings integer primary key,"userId: {1.0, 1.0, 1.0, 1.0, 1.0}",
entity_144,column,entity_142,movielens,movieId,ratings,integer,"movieId is an identifier for movies used by https://movielens.org. E.g., the movie Toy Story has the link https://movielens.org/movies/1.",foreign key,"30.0, 32.0, 34.0, 36.0, 80.0",movieId ratings  integer foreign key,"movieId: {30.0, 32.0, 34.0, 36.0, 80.0}",
entity_145,column,entity_142,movielens,rating,ratings,float,"Ratings are made on a 5-star scale, with half-star increments (0.5 stars - 5.0 stars).",,"5.0, 5.0, 2.0, 1.0, 5.0",rating ratings,"rating: {5.0, 5.0, 2.0, 1.0, 5.0}",
entity_146,column,entity_142,movielens,timestamp,ratings,time,"Timestamps represent seconds since midnight Coordinated Universal Time (UTC) of January 1, 1970.",,"944249077.0, 943228858.0, 943228491.0, 944249008.0, 944248943.0",timestamp ratings time,"timestamp: {944249077.0, 943228858.0, 943228491.0, 944249008.0, 944248943.0}",
entity_147,table,entity_133,movielens,tags,,,"Tags Data File Structure (tags.csv)
All tags are contained in the file tags.csv. Each line of this file after the header row represents one tag applied to one movie by one user, and has the following format:

userId,movieId,tag,timestamp
The lines within this file are ordered first by userId, then, within user, by movieId.

Tags are user-generated metadata about movies. Each tag is typically a single word or short phrase. The meaning, value, and purpose of a particular tag is determined by each user.

Timestamps represent seconds since midnight Coordinated Universal Time (UTC) of January 1, 1970.",,"userId, movieId, tag, timestamp","tags [userId, movieId, tag, timestamp]","tags: {userId, movieId, tag, timestamp}",25
entity_148,column,entity_147,movielens,userId,tags,integer,Each line of this file after the header row represents one tag applied to one movie by one user,foreign key,"34, 34, 34, 55, 58",userId tags integer foreign key,"userId: {34, 34, 34, 55, 58}",
entity_149,column,entity_147,movielens,movieId,tags,integer,"movieId is an identifier for movies used by https://movielens.org. E.g., the movie Toy Story has the link https://movielens.org/movies/1.",foreign key,"2174, 2174, 8623, 5766, 7451",movieId tags integer foreign key,"movieId: {2174, 2174, 8623, 5766, 7451}",
entity_150,column,entity_147,movielens,tag,tags,array string,"Tags are user-generated metadata about movies. Each tag is typically a single word or short phrase. The meaning, value, and purpose of a particular tag is determined by each user.",,"music, weird, Steve Martin, the killls and the score, bullying",tag tags array string,"tag: {music, weird, Steve Martin, the killls and the score, bullying}",
entity_151,column,entity_147,movielens,timestamp,tags,time,"Timestamps represent seconds since midnight Coordinated Universal Time (UTC) of January 1, 1970.",,"1249808064, 1249808102, 1249808497, 1319322078, 1672551536",timestamp tags time,"timestamp: {1249808064, 1249808102, 1249808497, 1319322078, 1672551536}",
